federal = read.csv('./dataset/federalFundsRate.csv')
federal = read.csv('./dataset/federalFundsRate.csv')
setwd("/media/mic0331/Data/Data Analysis/Courses/Edx/MITx: 15.071x The Analytics Edge")
fedFunds = read.csv('./dataset/federalFundsRate.csv', stringsAsFactors = F)
View(fedFunds)
table(fedFunds, RaisedFedFunds)
table(fedFunds, fedFunds$RaisedFedFunds)
tapply(fedFunds$RaisedFedFunds, fedFunds$Date, mean)
table (fedFunds$RaisedFedFunds)
=294/(291+294)
294/(291+294)
tapply(fedFunds$RaisedFedFunds, fedFunds$Chairman, mean)
sort(tapply(fedFunds$RaisedFedFunds, fedFunds$Chairman, mean))
table(fedFunds$Chairman)
fedFunds$Chairman <- as.factor(fedFunds$Chairman)
fedFunds$DemocraticPres <- as.factor(fedFunds$DemocraticPres)
fedFunds$RaisedFedFunds <- as.factor(fedFunds$RaisedFedFunds)
set.seed(201)
library(caTools)
spl = sample.split(fedFunds$RaisedFedFunds, 0.7)
training = subset(fedFunds, split == TRUE)
training = subset(fedFunds, spl == TRUE)
testing = subset(fedFunds, spl == FALSE)
LogModel = glm(RaisedFedFunds ~ PreviousRate + Streak + Unemployment, HomeownershipRate, DemocraticPres, MonthsUntilElection, data=training, family="binomial")
View(training)
LogModel = glm(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data=training, family="binomial")
summary(LogModel)
sample = testing[FALSE, ]
View(sample)
pred <- predict(LogModel, newdata = c(1.7,5.1,65.3,1,18), type = "response")
sample <- data.frame(c(1.7,5.1,65.3,1,18))
View(sample)
sample <- data.frame(1.7,5.1,65.3,1,18 )
View(sample)
sample <- data.frame(PreviousRate=1.7,Streak=-3,Unemployment=5.1,HomeownershipRate=65.3,DemocraticPres=0,MonthsUntilElection=18 )
View(sample)
pred <- predict(LogModel, newdata = sample, type = "response")
sample$DemocraticPres <- as.factor(sample$DemocraticPres)
pred <- predict(LogModel, newdata = sample, type = "response")
pred
summary(LogModel)
prediction <- predict(LogModel, newdata = testing, type="response")
table(testing$RaisedFedFunds, prediction > 0.5)
prediction
table(testing$RaisedFedFunds, prediction > 0.5)
summary(prediction)
table(fedFunds$RaisedFedFunds)
294/(294+291)
table(fedFunds$RaisedFedFunds)
table(testing$RaisedFedFunds, prediction > 0.5)
table(testing$RaisedFedFunds)
table(testing$RaisedFedFunds, prediction > 0.5)
88-57
60+57
60+57
87+88
(87-60)+(88-57)
perf = performance(prediction, "tpr", "fpr")
library(ROCR)
ROCRpred = prediction(prediction, testing$RaisedFedFunds)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
ROCRauc <- as.numeric(performance(ROCRpred, "auc")@y.values)
ROCRauc
library(rpart)
library(rpart.plot)
set.seed(201)
library(caret)
set.seed(201)
numFolds = trainControl(method = "cv", number = 10)
cpGrid = expand.grid(.cp=seq(0.001,0.05,0.001))
train(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = training, method = "rpart", trControl=50, tuneGrid=cpGrid)
set.seed(201)
numFolds = trainControl(method = "cv", number = 10)
cpGrid = expand.grid(.cp=seq(0.001,0.05,0.001))
train(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = training, method = "rpart", trControl=50, tuneGrid=cpGrid)
train(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = training, method = "rpart", trControl=numFolds, tuneGrid=cpGrid)
tree <- rpart(RaisedFedFunds ~  PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = training, method = "class", cp = .016)
prp(tree)
tree.predict <- predict(tree, newdata = sample, type = "class")
tree.predict
tree.predict <- predict(tree, newdata = sample)
tree.predict
tree.predict <- predict(tree, newdata = testing, type = "class")
t <- table(testing$RaisedFedFunds, tree.predict)
N <- nrow(testing)
TN <- t[1]
FP <- t[3]
FN <- t[2]
TP <- t[4]
Acc <- (TN+TP)/N
Acc
households = read.csv('./dataset/Households')
households = read.csv('./dataset/Households.csv')
households = read.csv('./dataset/Households.csv')
table(households$MorningPct)
View(households)
table(households$NumVisits, households$MorningPct > 50)
View(households)
table(households$NumVisits, households$MorningPct = 100)
table(households$NumVisits, households$MorningPct == 100)
View(households)
subset(households$NumVisits, households$MorningPct == 100)
subset(households, households$MorningPct == 100)
33+11+5+11
subset(households, households$AfternoonPct == 100)
View(households)
subset(households, households$MorningPct == 100)
subset(households, households$AfternoonPct == 100)
View(households)
subset(households, households$AvgSalesValue >= 150)
subset(households, households$AvgDiscount >= 25)
subset(households, households$NumVisits >= 300)
len(subset(households, households$NumVisits >= 300))
size(subset(households, households$NumVisits >= 300))
length(subset(households, households$NumVisits >= 300))
x<-(subset(households, households$NumVisits >= 300))
148/2500
View(households)
library(caret)
preproc = preProcess(Households)
preproc = preProcess(households)
HouseholdsNorm = predict(preproc, households)
max(HouseholdsNorm$NumVisits)
min(HouseholdsNorm$AfternoonPct)
set.seed(200)
distances <- dist(HouseholdsNorm, method = "euclidean")
ClusterShoppers <- hclust(distances, method = "ward.D")
plot(ClusterShoppers, labels = FALSE)
set.seed(200)
k=10
KMC = kmeans(HouseholdsNorm, centers = k)
table(KMC$size)
summary(KMC)
summary(size)
summary(KMC$size)
table(KMC$size)
str(KMC)
KMC$size
min(KMC$size)
max(KMC$size)
clusterGroups = cutree(KMC, k = 10)
str(KMC)
table(KMC$cluster, HouseholdsNorm$MorningPct)
table(KMC$cluster, HouseholdsNorm$AvgProdCount)
table(KMC$cluster, HouseholdsNorm$NumVisits)
set.seed(500)
k=5
KMC = kmeans(HouseholdsNorm, centers = k)
min(KMC$size)
max(KMC$size)
table(KMC$cluster, HouseholdsNorm$NumVisits)
energy = read.csv('./dataset/energy.csv')
table(energy$GenTotalRenewable)
tapply(energy$GenTotalRenewable, energy$STATE, mean)
max(tapply(energy$GenTotalRenewable, energy$STATE, mean))
sort(tapply(energy$GenTotalRenewable, energy$STATE, mean))
subset(energy, energy$STATE == ID)
subset(energy, energy$STATE == 'ID')
id = subset(energy, energy$STATE == 'ID')
sort(table(id$GenTotalRenewable))
View(id)
View(energy)
table(energy$AllSourcesCO2)
tapply(energy$AllSourcesCO2, mean, na.rm = TRUE)
tapply(energy$AllSourcesCO2, energy$STATE, mean, na.rm = TRUE)
sort(tapply(energy$AllSourcesCO2, energy$STATE, mean, na.rm = TRUE))
sort(tapply(energy$AllSourcesCO2, energy$STATE & energy$YEAR, mean, na.rm = TRUE))
sort(tapply(energy$AllSourcesCO2, energy$STATE $& energy$YEAR, mean, na.rm = TRUE))
sort(tapply(energy$AllSourcesCO2, energy$presidential.results, mean, na.rm = TRUE))
rep = subset(energy, energy$presidential.results == 0)
sort(tapply(rep$AllSourcesCO2, rep$presidential.results, mean, na.rm = TRUE))
sort(tapply(rep$AllSourcesCO2, rep$YEAR, mean, na.rm = TRUE))
table(rep$YEAR, rep$STATE)
sort(tapply(rep$AllSourcesCO2, rep$YEAR, mean, na.rm = TRUE))
sort(tapply(rep$AllSourcesCO2, rep$YEAR, mean, na.rm = TRUE))
sort(tapply(rep$AllSourcesCO2, rep$YEAR, mean, na.rm = TRUE))
sort(tapply(rep$AllSourcesCO2, rep$YEAR, mean, na.rm = TRUE))
sort(tapply(rep$AllSourcesCO2, rep$STATE, mean, na.rm = TRUE))
dem = subset(energy, energy$presidential.results == 1)
sort(tapply(dem$AllSourcesCO2, dem$YEAR, mean, na.rm = TRUE))
sort(tapply(dem$AllSourcesCO2, dem$STATE, mean, na.rm = TRUE))
cor(energy$AllSourcesCO2, energy$EsalesIndustrial, use="complete")
cor(energy$AllSourcesSO2, energy$EsalesIndustrial, use="complete")
cor(energy$AllSourcesNOx, energy$EsalesIndustrial, use="complete")
cor(energy$AllSourcesNOx, energy$EsalesResidential, use="complete")
boxplot(EPriceTotal ~ SATE, data = energy)
boxplot(EPriceTotal ~ STATE, data = energy)
tapply(energy$EPriceTotal, energy$STATE, mean)
sort(tapply(energy$EPriceTotal, energy$STATE, mean))
sort(tapply(energy$GenTotal, energy$STATE, mean))
set.seed(144)
spl = sample(1:nrow(energy), size = 0.7*nrow(energy))
train = energy[spl,]
test = energy[-spl,]
mod = glm(GenSolarBinary ~  GenHydro, GenSolar, CumlFinancial, CumlRegulatory, Total.salary, Import, data = train, , family="binomial")
mod = glm(GenSolarBinary ~  GenHydro + GenSolar + CumlFinancial + CumlRegulatory + Total.salary + Import, data = train, , family="binomial")
summary(mod)
mod.predict <- predict(mod, type="response")
mod.predict <- predict(mod, data=test, type="response")
t <- table(test$GenSolarBinary, mod.predict >= .5)
mod.predict <- predict(mod, data=test, type="response")
t <- table(test$GenSolarBinary, mod.predict >= .5)
mod.predict <- predict(mod, newdata=test, type="response")
t <- table(test$GenSolarBinary, mod.predict >= .5)
N <- nrow(test)
TN <- t[1]
FP <- t[3]
FN <- t[2]
TP <- t[4]
Acc <- (TN+TP)/N
Acc
rep <- subset(test, test$presidential.results == 0)
dem <- subset(test, test$presidential.results == 0)
mod.predict <- predict(mod, newdata=rep, type="response")
t <- table(rep$GenSolarBinary, mod.predict >= .5)
N <- nrow(rep)
TN <- t[1]
FP <- t[3]
FN <- t[2]
TP <- t[4]
Acc <- (TN+TP)/N
Acc
mod.predict <- predict(mod, newdata=dem, type="response")
t <- table(dem$GenSolarBinary, mod.predict >= .5)
N <- nrow(dem)
TN <- t[1]
FP <- t[3]
FN <- t[2]
TP <- t[4]
Acc <- (TN+TP)/N
Acc
dem <- subset(test, test$presidential.results == 1)
mod.predict <- predict(mod, newdata=dem, type="response")
t <- table(dem$GenSolarBinary, mod.predict >= .5)
N <- nrow(dem)
TN <- t[1]
FP <- t[3]
FN <- t[2]
TP <- t[4]
Acc <- (TN+TP)/N
Acc
library(caret)
train.limited = train[,-which(names(train) == "GenSolarBinary")]
train.limited
test.limited = test[,-which(names(test) == "GenSolarBinary")]
preproc = preProcess(train.limited)
