legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
# f4
WeekdayCounts = as.data.frame(table(f3$Weekday))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group=1))
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
f3.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f3.plot <- f3.plot + geom_line(aes(group=1))
f3.plot <- f3.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f3.plot <- f3.plot + xlab("Day of the Week")
f3.plot <- f3.plot + ylab("Total eJob recorded")
f3.plot <- f3.plot + theme_bw()
f3.plot
# f5
WeekdayCounts = as.data.frame(table(f2$Weekday))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group=1))
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
f2.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f2.plot <- f2.plot + geom_line(aes(group=1))
f2.plot <- f2.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f2.plot <- f2.plot + xlab("Day of the Week")
f2.plot <- f2.plot + ylab("Total eJob recorded")
f2.plot <- f2.plot + theme_bw()
f2.plot
# f6
WeekdayCounts = as.data.frame(table(f1$Weekday))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group=1))
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
f1.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f1.plot <- f1.plot + geom_line(aes(group=1))
f1.plot <- f1.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f1.plot <- f1.plot + xlab("Day of the Week")
f1.plot <- f1.plot + ylab("Total eJob recorded")
f1.plot <- f1.plot + theme_bw()
f1.plot
multiplot(f1.map, f2.map, f3.map, f1.plot, f2.plot, f3.plot, cols=3 )
multiplot(f1.map, f1.plot, f2.map, f2.plot, f3.map, f3.plot, cols=3 )
top_fleet <- tail(names(sort(table(overall_2016$fleet))), 3)
f1 <- subset(overall_april_2016, fleet == top_fleet[3])
f2 <- subset(overall_april_2016, fleet == top_fleet[2])
f3 <- subset(overall_april_2016, fleet == top_fleet[1])
top_fleet
WeekdayCounts = as.data.frame(table(top_fleet$Weekday))
top3 <- subset(overall_april_2016, fleet == top_fleet)
top3 <- subset(overall_april_2016, fleet == top_fleet)
top3 <- subset(overall_april_2016, fleet = top_fleet)
top3 <- overall_2016[,top_fleet]
top3 <- overall_2016[overall_2016$fleet %in% top_fleet]
top3 <- overall_2016[overall_2016$fleet %in% top_fleet,]
View(top3)
top_fleet <- tail(names(sort(table(overall_2016$fleet))), 3)
top3 <- overall_2016[overall_2016$fleet %in% top_fleet,]
WeekdayCounts = as.data.frame(table(top_fleet$Weekday))
WeekdayCounts = as.data.frame(table(top3$Weekday))
View(WeekdayCounts)
WeekdayCounts = as.data.frame(table(top3$Weekday, top3$fleet))
View(WeekdayCounts)
table(top3$Weekday, top3$fleet)
WeekdayCounts = as.data.frame(table(top3$Weekday, top3$fleet))
View(top3)
View(WeekdayCounts)
top3$fleet
table(top3$fleet)
View(top3)
top3 <- subset(overall_april_2016, fleet == top_fleet[1] |
fleet == top_fleet[2] |
fleet == top_fleet[3])
View(top3)
WeekdayCounts = as.data.frame(table(top3$Weekday, top3$fleet))
WeekdayCounts
top3$fleet
WeekdayCounts = as.data.frame(table(top3$Weekday, top3$fleet))
View(WeekdayCounts)
WeekdayCounts <- ifelse(WeekdayCounts$Freq == 0, NULL, WeekdayCounts$Freq)
WeekdayCounts = as.data.frame(table(top3$Weekday, top3$fleet))
top3
table(top3$fleet)
top3 <- subset(overall_april_2016, fleet == top_fleet[1] |
fleet == top_fleet[2] |
fleet == top_fleet[3])
top3$Weekday
WeekdayCounts = as.data.frame(table(top3$Weekday, top3$fleet))
WeekdayCounts
top3 <- as.data.frame(subset(overall_april_2016, fleet == top_fleet[1] |
fleet == top_fleet[2] |
fleet == top_fleet[3]))
WeekdayCounts = as.data.frame(table(top3$Weekday, top3$fleet))
WeekdayCounts
str(overall_2016)
top3$fleet <- factor(top_fleet, levels = top_fleet)
WeekdayCounts = as.data.frame(table(top3$Weekday, top3$fleet))
WeekdayCounts
ggplot(WeekdayCounts, aes(x = Var1, y = Freq, color=Var2)) + geom_line(aes(group=1))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq), color=Var2) + geom_line(aes(group=1))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group=1, color=Var2))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(color=Var2))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq, color=Var2)) + geom_line(aes(group=1))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq) + geom_line(aes(group=1, colour=Var2)))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq) + geom_line(aes(group=1, color=Var2)))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq, colour=Var2) + geom_line(aes(group=1)))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq, color=Var2) + geom_line(aes(group=1)))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq) + geom_line(aes(group=1)))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq) + geom_line(aes(group=1)))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq) + geom_line(aes(group=1))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group=1))
top3$fleet <- factor(top_fleet, levels = top_fleet)
WeekdayCounts = as.data.frame(table(top3$Weekday, top3$fleet))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group=1))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group=1))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq, color = Var2)) + geom_line(aes(group=1))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group=Var2))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group=Var2, colour=Var2))
top_fleet <- tail(names(sort(table(overall_2016$fleet))), 3)
top3 <- subset(overall_april_2016, fleet == top_fleet[1] |
fleet == top_fleet[2] |
fleet == top_fleet[3])
top3$fleet <- factor(top_fleet, levels = top_fleet)
f1 <- subset(overall_april_2016, fleet == top_fleet[3])
f2 <- subset(overall_april_2016, fleet == top_fleet[2])
f3 <- subset(overall_april_2016, fleet == top_fleet[1])
# f3
LatLonCount = as.data.frame(table(round(f3$GPS$Longitude,1), round(f3$GPS$Latitude,1)))
LatLonCount$Long = as.numeric(as.character(LatLonCount$Var1))
LatLonCount$Lat = as.numeric(as.character(LatLonCount$Var2))
LatLonCount2 <- subset(LatLonCount, LatLonCount$Freq > 0)
f3.map <- ggmap(england) + scale_fill_gradientn(colours=rev(rainbow(100, start=0, end=0.85)))
f3.map <- f3.map + stat_density2d(data=LatLonCount2, aes(x = Long, y = Lat,fill = ..level.., alpha = ..level..), geom = 'polygon')
f3.map <- f3.map + scale_alpha_continuous(guide="none",range=c(0,.4))
f3.map <- f3.map + geom_point(data = f3, aes(x = GPS$Longitude, y = GPS$Latitude), na.rm = TRUE, size = 1.5, color="black")
f3.map <- f3.map + geom_label(aes(x = Long, y = Lat, label = Location), data= tf_locations, color = "blue", size=4)
f3.map <- f3.map + ggtitle(paste(top_fleet[3], "2016", sep = " "))
f3.map <- f3.map + theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
# f2
LatLonCount = as.data.frame(table(round(f2$GPS$Longitude,1), round(f2$GPS$Latitude,1)))
LatLonCount$Long = as.numeric(as.character(LatLonCount$Var1))
LatLonCount$Lat = as.numeric(as.character(LatLonCount$Var2))
LatLonCount2 <- subset(LatLonCount, LatLonCount$Freq > 0)
f2.map <- ggmap(england) + scale_fill_gradientn(colours=rev(rainbow(100, start=0, end=0.85)))
f2.map <- f2.map + stat_density2d(data=LatLonCount2, aes(x = Long, y = Lat,fill = ..level.., alpha = ..level..), geom = 'polygon')
f2.map <- f2.map + scale_alpha_continuous(guide="none",range=c(0,.4))
f2.map <- f2.map + geom_point(data = f2, aes(x = GPS$Longitude, y = GPS$Latitude), na.rm = TRUE, size = 1.5, color="black")
f2.map <- f2.map + geom_label(aes(x = Long, y = Lat, label = Location), data= tf_locations, color = "blue", size=4)
f2.map <- f2.map + ggtitle(paste(top_fleet[2], "2016", sep = " "))
f2.map <- f2.map + theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
# f1
LatLonCount = as.data.frame(table(round(f1$GPS$Longitude,1), round(f1$GPS$Latitude,1)))
LatLonCount$Long = as.numeric(as.character(LatLonCount$Var1))
LatLonCount$Lat = as.numeric(as.character(LatLonCount$Var2))
LatLonCount2 <- subset(LatLonCount, LatLonCount$Freq > 0)
f1.map <- ggmap(england) + scale_fill_gradientn(colours=rev(rainbow(100, start=0, end=0.85)))
f1.map <- f1.map + stat_density2d(data=LatLonCount2, aes(x = Long, y = Lat,fill = ..level.., alpha = ..level..), geom = 'polygon')
f1.map <- f1.map + scale_alpha_continuous(guide="none",range=c(0,.4))
f1.map <- f1.map + geom_point(data = f1, aes(x = GPS$Longitude, y = GPS$Latitude), na.rm = TRUE, size = 1.5, color="black")
f1.map <- f1.map + geom_label(aes(x = Long, y = Lat, label = Location), data= tf_locations, color = "blue", size=4)
f1.map <- f1.map + ggtitle(paste(top_fleet[1], "2016", sep = " "))
f1.map <- f1.map + theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
# f4
WeekdayCounts = as.data.frame(table(top3$Weekday, top3$fleet))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group=Var2, colour=Var2))
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
f3.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f3.plot <- f3.plot + geom_line(aes(group=1))
f3.plot <- f3.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f3.plot <- f3.plot + xlab("Day of the Week")
f3.plot <- f3.plot + ylab("Total eJob recorded")
f3.plot <- f3.plot + theme_bw()
f3.plot
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
f3.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f3.plot <- f3.plot + geom_line(aes(group=Var2, colour=Var2))
f3.plot <- f3.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f3.plot <- f3.plot + xlab("Day of the Week")
f3.plot <- f3.plot + ylab("Total eJob recorded")
f3.plot <- f3.plot + theme_bw()
f3.plot
layout <- matrix(c(1, 2, 3, 4, 4, 4), nrow = 2, byrow = TRUE)
multiplot(f1.map, f2.map, f3.map, f4.plot, layout = layout)
WeekdayCounts = as.data.frame(table(top3$Weekday, top3$fleet))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group=Var2, colour=Var2))
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
f4.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f4.plot <- f4.plot + geom_line(aes(group=Var2, colour=Var2))
f4.plot <- f4.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f4.plot <- f4.plot + xlab("Day of the Week")
f4.plot <- f4.plot + ylab("Total eJob recorded")
f4.plot <- f4.plot + theme_bw()
f4.plot
WeekdayCounts = as.data.frame(table(top3$Weekday, top3$fleet))
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
f4.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f4.plot <- f4.plot + geom_line(aes(group=Var2, colour=Var2))
f4.plot <- f4.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f4.plot <- f4.plot + xlab("Day of the Week")
f4.plot <- f4.plot + ylab("Total eJob recorded")
f4.plot <- f4.plot + theme_bw()
f4.plot
multiplot(f1.map, f2.map, f3.map, f4.plot, layout = layout)
WeekdayCounts = as.data.frame(table(top3$Weekday, top3$fleet))
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
f4.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f4.plot <- f4.plot + geom_line(aes(group=Var2, colour=Var2))
f4.plot <- f4.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f4.plot <- f4.plot + xlab("Day of the Week")
f4.plot <- f4.plot + ylab("Total eJob recorded")
f4.plot <- f4.plot + theme_bw()
f4.plot <- f4.plot + scale_fill_discrete(name="Fleet")
f4.plot
f4.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f4.plot <- f4.plot + geom_line(aes(group=Var2, colour=Var2))
f4.plot <- f4.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f4.plot <- f4.plot + xlab("Day of the Week")
f4.plot <- f4.plot + ylab("Total eJob recorded")
f4.plot <- f4.plot + theme_bw(base_family="Helvetica")
f4.plot <- f4.plot + theme(legend.key=element_blank())
f4.plot
f4.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f4.plot <- f4.plot + geom_line(aes(group=Var2, colour=Var2))
f4.plot <- f4.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f4.plot <- f4.plot + xlab("Day of the Week")
f4.plot <- f4.plot + ylab("Total eJob recorded")
f4.plot <- f4.plot + theme_bw(base_family="Helvetica")
f4.plot <- f4.plot + theme(axis.ticks.y=element_blank())
f4.plot <- f4.plot + theme(panel.border=element_blank())
f4.plot <- f4.plot + theme(legend.key=element_blank())
f4.plot
colors <- c('#11605E', '#17807E', '#8BC0BF','#D8472B')
colors <- c('#11605E', '#17807E', '#8BC0BF','#D8472B')
f4.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f4.plot <- f4.plot + geom_line(aes(group=Var2, colour=colors))
f4.plot <- f4.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f4.plot <- f4.plot + xlab("Day of the Week")
f4.plot <- f4.plot + ylab("Total eJob recorded")
f4.plot <- f4.plot + theme_bw(base_family="Helvetica")
f4.plot <- f4.plot + theme(axis.ticks.y=element_blank())
f4.plot <- f4.plot + theme(panel.border=element_blank())
f4.plot <- f4.plot + theme(legend.key=element_blank())
f4.plot
colors <- c('#11605E', '#17807E', '#8BC0BF')
f4.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f4.plot <- f4.plot + geom_line(aes(group=Var2, colour=colors))
f4.plot <- f4.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f4.plot <- f4.plot + xlab("Day of the Week")
f4.plot <- f4.plot + ylab("Total eJob recorded")
f4.plot <- f4.plot + theme_bw(base_family="Helvetica")
f4.plot <- f4.plot + theme(axis.ticks.y=element_blank())
f4.plot <- f4.plot + theme(panel.border=element_blank())
f4.plot <- f4.plot + theme(legend.key=element_blank())
f4.plot
f4.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f4.plot <- f4.plot + geom_line(aes(group=Var2, colour=Var2))
f4.plot <- f4.plot + scale_color_manual(name="", values=gender_colors)
f4.plot <- f4.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f4.plot <- f4.plot + xlab("Day of the Week")
f4.plot <- f4.plot + ylab("Total eJob recorded")
f4.plot <- f4.plot + theme_bw(base_family="Helvetica")
f4.plot <- f4.plot + theme(axis.ticks.y=element_blank())
f4.plot <- f4.plot + theme(panel.border=element_blank())
f4.plot <- f4.plot + theme(legend.key=element_blank())
f4.plot
f4.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f4.plot <- f4.plot + geom_line(aes(group=Var2, colour=Var2))
f4.plot <- f4.plot + scale_color_manual(name="", values=colors)
f4.plot <- f4.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f4.plot <- f4.plot + xlab("Day of the Week")
f4.plot <- f4.plot + ylab("Total eJob recorded")
f4.plot <- f4.plot + theme_bw(base_family="Helvetica")
f4.plot <- f4.plot + theme(axis.ticks.y=element_blank())
f4.plot <- f4.plot + theme(panel.border=element_blank())
f4.plot <- f4.plot + theme(legend.key=element_blank())
f4.plot
colors <- c('#11605E', '#17807E', '#D8472B','#8BC0BF')
f4.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f4.plot <- f4.plot + geom_line(aes(group=Var2, colour=Var2))
f4.plot <- f4.plot + scale_color_manual(name="", values=colors)
f4.plot <- f4.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f4.plot <- f4.plot + xlab("Day of the Week")
f4.plot <- f4.plot + ylab("Total eJob recorded")
f4.plot <- f4.plot + theme_bw(base_family="Helvetica")
f4.plot <- f4.plot + theme(axis.ticks.y=element_blank())
f4.plot <- f4.plot + theme(panel.border=element_blank())
f4.plot <- f4.plot + theme(legend.key=element_blank())
f4.plot
f4.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f4.plot <- f4.plot + geom_line(aes(group=Var2, colour=Var2))
f4.plot <- f4.plot + scale_color_manual(name="", values=colors)
f4.plot <- f4.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f4.plot <- f4.plot + labs(x=NULL, y="Total eJob recorded", title=chart_title)
f4.plot <- f4.plot + theme_bw(base_family="Helvetica")
f4.plot <- f4.plot + theme(axis.ticks.y=element_blank())
f4.plot <- f4.plot + theme(panel.border=element_blank())
f4.plot <- f4.plot + theme(legend.key=element_blank())
f4.plot
chart_title <- expression(atop("Frequency of jobs recorded with eJob",
atop(italic("Since 01/01/2016, By Weekday"))))
f4.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f4.plot <- f4.plot + geom_line(aes(group=Var2, colour=Var2))
f4.plot <- f4.plot + scale_color_manual(name="", values=colors)
f4.plot <- f4.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f4.plot <- f4.plot + labs(x=NULL, y="Total eJob recorded", title=chart_title)
f4.plot <- f4.plot + theme_bw(base_family="Helvetica")
f4.plot <- f4.plot + theme(axis.ticks.y=element_blank())
f4.plot <- f4.plot + theme(panel.border=element_blank())
f4.plot <- f4.plot + theme(legend.key=element_blank())
f4.plot
top_fleet <- tail(names(sort(table(overall_2016$fleet))), 3)
top3 <- subset(overall_april_2016, fleet == top_fleet[1] |
fleet == top_fleet[2] |
fleet == top_fleet[3])
top3$fleet <- factor(top_fleet, levels = top_fleet)
f1 <- subset(overall_april_2016, fleet == top_fleet[3])
f2 <- subset(overall_april_2016, fleet == top_fleet[2])
f3 <- subset(overall_april_2016, fleet == top_fleet[1])
# f3
LatLonCount = as.data.frame(table(round(f3$GPS$Longitude,1), round(f3$GPS$Latitude,1)))
LatLonCount$Long = as.numeric(as.character(LatLonCount$Var1))
LatLonCount$Lat = as.numeric(as.character(LatLonCount$Var2))
LatLonCount2 <- subset(LatLonCount, LatLonCount$Freq > 0)
f3.map <- ggmap(england) + scale_fill_gradientn(colours=rev(rainbow(100, start=0, end=0.85)))
f3.map <- f3.map + stat_density2d(data=LatLonCount2, aes(x = Long, y = Lat,fill = ..level.., alpha = ..level..), geom = 'polygon')
f3.map <- f3.map + scale_alpha_continuous(guide="none",range=c(0,.4))
f3.map <- f3.map + geom_point(data = f3, aes(x = GPS$Longitude, y = GPS$Latitude), na.rm = TRUE, size = 1.5, color="black")
f3.map <- f3.map + geom_label(aes(x = Long, y = Lat, label = Location), data= tf_locations, color = "blue", size=4)
f3.map <- f3.map + ggtitle(paste(top_fleet[3], "2016", sep = " "))
f3.map <- f3.map + theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
# f2
LatLonCount = as.data.frame(table(round(f2$GPS$Longitude,1), round(f2$GPS$Latitude,1)))
LatLonCount$Long = as.numeric(as.character(LatLonCount$Var1))
LatLonCount$Lat = as.numeric(as.character(LatLonCount$Var2))
LatLonCount2 <- subset(LatLonCount, LatLonCount$Freq > 0)
f2.map <- ggmap(england) + scale_fill_gradientn(colours=rev(rainbow(100, start=0, end=0.85)))
f2.map <- f2.map + stat_density2d(data=LatLonCount2, aes(x = Long, y = Lat,fill = ..level.., alpha = ..level..), geom = 'polygon')
f2.map <- f2.map + scale_alpha_continuous(guide="none",range=c(0,.4))
f2.map <- f2.map + geom_point(data = f2, aes(x = GPS$Longitude, y = GPS$Latitude), na.rm = TRUE, size = 1.5, color="black")
f2.map <- f2.map + geom_label(aes(x = Long, y = Lat, label = Location), data= tf_locations, color = "blue", size=4)
f2.map <- f2.map + ggtitle(paste(top_fleet[2], "2016", sep = " "))
f2.map <- f2.map + theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
# f1
LatLonCount = as.data.frame(table(round(f1$GPS$Longitude,1), round(f1$GPS$Latitude,1)))
LatLonCount$Long = as.numeric(as.character(LatLonCount$Var1))
LatLonCount$Lat = as.numeric(as.character(LatLonCount$Var2))
LatLonCount2 <- subset(LatLonCount, LatLonCount$Freq > 0)
f1.map <- ggmap(england) + scale_fill_gradientn(colours=rev(rainbow(100, start=0, end=0.85)))
f1.map <- f1.map + stat_density2d(data=LatLonCount2, aes(x = Long, y = Lat,fill = ..level.., alpha = ..level..), geom = 'polygon')
f1.map <- f1.map + scale_alpha_continuous(guide="none",range=c(0,.4))
f1.map <- f1.map + geom_point(data = f1, aes(x = GPS$Longitude, y = GPS$Latitude), na.rm = TRUE, size = 1.5, color="black")
f1.map <- f1.map + geom_label(aes(x = Long, y = Lat, label = Location), data= tf_locations, color = "blue", size=4)
f1.map <- f1.map + ggtitle(paste(top_fleet[1], "2016", sep = " "))
f1.map <- f1.map + theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
# f4
WeekdayCounts = as.data.frame(table(top3$Weekday, top3$fleet))
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
colors <- c('#11605E', '#17807E', '#D8472B','#8BC0BF')
chart_title <- expression(atop("Frequency of jobs recorded with eJob",
atop(italic("Since 01/01/2016, By Weekday"))))
f4.plot <- ggplot(WeekdayCounts, aes(x = Var1, y = Freq))
f4.plot <- f4.plot + geom_line(aes(group=Var2, colour=Var2))
f4.plot <- f4.plot + scale_color_manual(name="", values=colors)
f4.plot <- f4.plot + geom_point(data = WeekdayCounts, aes(x=Var1, y=Freq))
f4.plot <- f4.plot + labs(x=NULL, y="Total eJob recorded", title=chart_title)
f4.plot <- f4.plot + theme_bw(base_family="Helvetica")
f4.plot <- f4.plot + theme(axis.ticks.y=element_blank())
f4.plot <- f4.plot + theme(panel.border=element_blank())
f4.plot <- f4.plot + theme(legend.key=element_blank())
f4.plot
layout <- matrix(c(1, 2, 3, 4, 4, 4), nrow = 2, byrow = TRUE)
multiplot(f1.map, f2.map, f3.map, f4.plot, layout = layout)
setwd("/media/mic0331/Data/Data Analysis/Courses/Edx/MITx: 15.071x The Analytics Edge/kaggle competition")
train = read.csv("train2016.csv")#,na.strings="")
setwd("/media/mic0331/Data/Data Analysis/Courses/Edx/MITx: 15.071x The Analytics Edge/kaggle competition")
train = read.csv("train2016.csv")#,na.strings="")
test = read.csv("test2016.csv")#, na.strings="")
train$YOB[train$YOB > 2014] <- mean(train$YOB)
train = read.csv("train2016.csv",na.strings="")
test = read.csv("test2016.csv", na.strings="")
train$YOB[train$YOB == 2039] <- NA
library(mice)
simple = train[c("YOB", "Gender", "Income", "HouseholdStatus", "EducationLevel")]
imputed = complete(mice(simple))
train$YOB[train$YOB == 2039] <- NA
library(mice)
simple = train[c("YOB", "Gender", "Income", "HouseholdStatus", "EducationLevel")]
imputed = complete(mice(simple))
imputed = complete(mice(simple))
imputed = complete(mice(simple))
train = read.csv("train2016.csv",na.strings="")
test = read.csv("test2016.csv", na.strings="")
train$YOB[train$YOB == 2039] <- NA
library(mice)
simple = train[c("YOB", "Gender", "Income", "HouseholdStatus", "EducationLevel")]
imputed = complete(mice(simple))
train$YOB[train$YOB == 2039] <- NA
train$YOB <- as.integer(train$YOB)
test$YOB <- as.integer(test$YOB)
simple = train[c("YOB", "Gender", "Income", "HouseholdStatus", "EducationLevel")]
imputed = complete(mice(simple))
train$YOB = imputed$YOB
train$Gender = imputed$Gender
train$Income = imputed$Income
train$HouseholdStatus = imputed$HouseholdStatus
train$EducationLevel = imputed$EducationLevel
set.seed(8439)
adaboostMod <- boosting(Party ~ ., data = train, boos=TRUE, mfinal=10,coeflearn='Zhu', control=rpart.control(maxdepth=5))
library(adabag)
adaboostMod <- boosting(Party ~ ., data = train, boos=TRUE, mfinal=10,coeflearn='Zhu', control=rpart.control(maxdepth=5))
adaboostMod.pred = predict(adaboostMod, newdata=test)
MySubmission = data.frame(USER_ID = test$USER_ID, Predictions = adaboostMod.pred$class)
write.csv(MySubmission, "./submission/adaboostMod_3.csv", row.names=FALSE, quote = FALSE)
train = read.csv("train2016.csv")
asPrcnt <- function( arg1 ) {
round( 100 * arg1, digits = 2 )
}
checkForAnswerBias <- function( arg1Table, arg2Desc, arg3DiffMin, arg4DiffMax )
{
# see how many possible answers ...
numCols = ncol(arg1Table)
# loop over all the answers ...
for (i in 1:numCols)
{
# calc diff
diff = abs(arg1Table[1,i] - arg1Table[2,i]) / (arg1Table[1,i] + arg1Table[2,i])
# is there is bias to be seen!?
if ((diff > arg3DiffMin) && (diff <= arg4DiffMax))
{
# calc splits
dems = arg1Table[1,i] / (arg1Table[1,i] + arg1Table[2,i])
reps = arg1Table[2,i] / (arg1Table[1,i] + arg1Table[2,i])
#print out result
cat(arg2Desc,i,"Dem% =", asPrcnt(dems), "Rep% =", asPrcnt(reps), "Diff% =", asPrcnt(dems-reps), "\n")
}
}
}
compTable = table(train$Party,train$Q110740)
compTable
checkForAnswerBias( compTable, "Q110740", 0.1, 1.0 )
questions = grep("^Q",names(train))
for(i in questions)
{
resultsTable = table(train$Party,train[[i]])
#checkForAnswerBias( resultsTable, names(train)[i], 0.05, 0.10)   # 5 - 10 %
checkForAnswerBias( resultsTable, names(train)[i], 0.10, 0.25)   # 10 - 25 %
checkForAnswerBias( resultsTable, names(train)[i], 0.25, 1.00)   # > 25% diff
}
